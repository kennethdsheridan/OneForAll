# Define the stages in the pipeline
stages:
  - clear_cache
  - build
  - test
  - document
  - deploy

# Set global variables
variables:
  BIN_NAME: one_for_all
  ARTIFACTS_DIR: artifacts
  RUST_PROJECT: gitlab.com/kennethdashensheridan/oneforall

# Clear the cargo cache before each job
clear_cache:
  stage: build
  script:
    - echo "Changing to the one_for_all directory"
    - cd /builds/kennethdsheridan/oneforall/  # Adjust this path as needed
    - echo "Current working directory:"
    - pwd
    - echo "Clearing the Cargo build cache"
    - cargo clean
  when: always
  allow_failure: true

# Define the base image and settings for all jobs
before_script:
  - mkdir -p ${ARTIFACTS_DIR}
  - apt-get update && apt-get install -y curl git gcc make
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  - source $HOME/.cargo/env
  - rustup default stable
  - echo "Changing to the one_for_all directory"
  - pwd
  - ls -la
  - cd one_for_all || { echo "Directory one_for_all not found"; exit 1; }
  - cargo fetch

# Build the application for Linux
build_linux:
  stage: build
  needs: ["clear_cache"]
  script:
    - echo "Changing to the one_for_all directory for build"
    - pwd
    - ls -la
    - echo "Listing contents of src directory:"
    - ls -la src/
    - mkdir -p /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux
    - cargo build --release --target x86_64-unknown-linux-gnu
    - echo "Listing contents of the release directory:"
    - ls -la target/x86_64-unknown-linux-gnu/release/
    - cp target/x86_64-unknown-linux-gnu/release/${BIN_NAME} /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux/${BIN_NAME}-linux
  artifacts:
    paths:
      - /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux/${BIN_NAME}-linux
    expire_in: 1 week

# Build the application for macOS (Intel)
build_macos:
  stage: build
  needs: ["clear_cache"]
  script:
    - echo "Changing to the one_for_all directory for macOS build"
    - pwd
    - ls -la
    - echo "Listing contents of src directory:"
    - ls -la src/
    - echo "Adding macOS target for Rust"
    - rustup target add x86_64-apple-darwin
    - mkdir -p /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/macos
    - echo "Building for macOS..."
    - cargo build --release --target x86_64-apple-darwin
    - echo "Listing contents of the macOS release directory:"
    - ls -la target/x86_64-apple-darwin/release/
    - cp target/x86_64-apple-darwin/release/${BIN_NAME} /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/macos/${BIN_NAME}-macos
  artifacts:
    paths:
      - /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/macos/${BIN_NAME}-macos
    expire_in: 1 week



test:
  stage: test
  needs: ["build_linux"]
  script:
    - echo "Changing to the one_for_all directory for test"
    - pwd
    - ls -la
    - cargo test --verbose

# Generate Documentation
document:
  stage: document
  script:
    - echo "Generating documentation with cargo doc"
    - cargo doc --no-deps
    - ARTIFACTS_DIR_RELATIVE="${ARTIFACTS_DIR}/doc"  # Relative path for artifacts
    - echo "Checking if target/doc exists"
    - ls -la target/doc
    - echo "Ensuring ${ARTIFACTS_DIR_RELATIVE} exists"
    - mkdir -p ${ARTIFACTS_DIR_RELATIVE}
    - echo "Moving generated docs to ${ARTIFACTS_DIR_RELATIVE}"
    - mv target/doc/* ${ARTIFACTS_DIR_RELATIVE}/
    - echo "Listing contents of ${ARTIFACTS_DIR_RELATIVE}"
    - ls -la ${ARTIFACTS_DIR_RELATIVE}
  artifacts:
    paths:
      - ${ARTIFACTS_DIR_RELATIVE}  # Use relative path here
    expire_in: 1 week


deploy:
  stage: deploy
  needs: ["build_linux", "build_macos", "document"]
  script:
    - echo "Deploying Linux binary..."
    - LINUX_ARTIFACT="${ARTIFACTS_DIR}/linux/${BIN_NAME}-linux"
    - |
      if [ -f "${LINUX_ARTIFACT}" ]; then
        echo "Linux artifact found, deploying..."
        # Linux deployment commands
      else
        echo "Linux artifact not found."
        exit 1
      fi
    - echo "Deploying macOS binary..."
    - MACOS_ARTIFACT="${ARTIFACTS_DIR}/macos/${BIN_NAME}-macos"
    - |
      if [ -f "${MACOS_ARTIFACT}" ]; then
        echo "macOS artifact found, deploying..."
        # macOS deployment commands
      else
        echo "macOS artifact not found."
        exit 1
      fi
  artifacts:
    paths:
      - ${ARTIFACTS_DIR}/linux/${BIN_NAME}-linux  # Relative path
      - ${ARTIFACTS_DIR}/macos/${BIN_NAME}-macos  # Relative path
      - ${ARTIFACTS_DIR}/doc                     # Rela


# Cache the Cargo dependencies to speed up builds
cache:
  key: "${CI_COMMIT_REF_SLUG}-cargo"
  paths:
    - Cargo.lock
    - target
    - $CARGO_HOME/registry
