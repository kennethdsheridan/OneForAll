# Define the stages in the pipeline
stages:
  - clear_cache
  - build
  - test
  - document
  - deploy

# Set global variables
variables:
  BIN_NAME: one_for_all
  ARTIFACTS_DIR: artifacts
  RUST_PROJECT: gitlab.com/kennethdashensheridan/oneforall

# Clear the cargo cache before each job
clear_cache:
  stage: build
  script:
    - echo "Changing to the one_for_all directory"
    - cd /builds/kennethdsheridan/oneforall/  # Adjust this path as needed
    - echo "Current working directory:"
    - pwd
    - echo "Clearing the Cargo build cache"
    - cargo clean
  when: always
  allow_failure: true

# Define the base image and settings for all jobs
before_script:
  - mkdir -p ${ARTIFACTS_DIR}
  - apt-get update && apt-get install -y curl git gcc make
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  - source $HOME/.cargo/env
  - rustup default stable
  - echo "Changing to the one_for_all directory"
  - pwd
  - ls -la
  - cd one_for_all || { echo "Directory one_for_all not found"; exit 1; }
  - cargo fetch

# Build the application for Linux
build_linux:
  stage: build
  needs: ["clear_cache"]
  script:
    - echo "Changing to the one_for_all directory for build"
    - pwd
    - ls -la
    - echo "Listing contents of src directory:"
    - ls -la src/
    - mkdir -p /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux
    - cargo build --release --target x86_64-unknown-linux-gnu
    - echo "Listing contents of the release directory:"
    - ls -la target/x86_64-unknown-linux-gnu/release/
    - cp target/x86_64-unknown-linux-gnu/release/${BIN_NAME} /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux/
  artifacts:
    paths:
      - /builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/linux/${BIN_NAME}
    expire_in: 1 week

test:
  stage: test
  needs: ["build_linux"]
  script:
    - echo "Changing to the one_for_all directory for test"
    - pwd
    - ls -la
    - cargo test --verbose

# Generate Documentation
document:
  stage: document
  script:
    - echo "Generating documentation with cargo doc"
    - cargo doc --no-deps
    - DOCUMENTATION_DIR="/builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}/doc"
    - echo "Checking if target/doc exists"
    - ls -la target/doc
    - echo "Ensuring ${DOCUMENTATION_DIR} exists"
    - mkdir -p ${DOCUMENTATION_DIR}
    - echo "Moving generated docs to ${DOCUMENTATION_DIR}"
    - mv target/doc/* ${DOCUMENTATION_DIR}/
    - echo "Listing contents of ${DOCUMENTATION_DIR}"
    - ls -la ${DOCUMENTATION_DIR}
  artifacts:
    paths:
      - ${DOCUMENTATION_DIR}
    expire_in: 1 week


# Deploy the application
deploy:
  stage: deploy
  needs: ["build_linux", "document"]  # Ensure it needs all stages that produce artifacts
  script:
    - echo "Current working directory:"
    - pwd
    - ARTIFACTS_DIR_ABSOLUTE="/builds/kennethdsheridan/oneforall/${ARTIFACTS_DIR}"
    - echo "Checking if ${ARTIFACTS_DIR_ABSOLUTE} exists"
    - ls -la
    - if [ -d "${ARTIFACTS_DIR_ABSOLUTE}" ]; then
      echo "${ARTIFACTS_DIR_ABSOLUTE} directory found.";
      ls -la ${ARTIFACTS_DIR_ABSOLUTE};
      else
      echo "${ARTIFACTS_DIR_ABSOLUTE} directory not found.";
      exit 1;
      fi
    - echo "Deploying..."

  artifacts:
    paths:
      - ${ARTIFACTS_DIR_ABSOLUTE}/linux/${BIN_NAME}
      - ${ARTIFACTS_DIR_ABSOLUTE}/doc


# Cache the Cargo dependencies to speed up builds
cache:
  key: "${CI_COMMIT_REF_SLUG}-cargo"
  paths:
    - Cargo.lock
    - target
    - $CARGO_HOME/registry
